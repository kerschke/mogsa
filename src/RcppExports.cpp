// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// assureBoundsCPP
NumericVector assureBoundsCPP(NumericVector ind, NumericVector g, NumericVector lower, NumericVector upper);
RcppExport SEXP _mogsa2_assureBoundsCPP(SEXP indSEXP, SEXP gSEXP, SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ind(indSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type g(gSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(assureBoundsCPP(ind, g, lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// computeVectorLengthCPP
double computeVectorLengthCPP(NumericVector vec);
RcppExport SEXP _mogsa2_computeVectorLengthCPP(SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(computeVectorLengthCPP(vec));
    return rcpp_result_gen;
END_RCPP
}
// normalizeVectorCPP
NumericVector normalizeVectorCPP(NumericVector vec, double prec);
RcppExport SEXP _mogsa2_normalizeVectorCPP(SEXP vecSEXP, SEXP precSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< double >::type prec(precSEXP);
    rcpp_result_gen = Rcpp::wrap(normalizeVectorCPP(vec, prec));
    return rcpp_result_gen;
END_RCPP
}
// computeAngleCPP
double computeAngleCPP(NumericVector vec1, NumericVector vec2, double prec);
RcppExport SEXP _mogsa2_computeAngleCPP(SEXP vec1SEXP, SEXP vec2SEXP, SEXP precSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec1(vec1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vec2(vec2SEXP);
    Rcpp::traits::input_parameter< double >::type prec(precSEXP);
    rcpp_result_gen = Rcpp::wrap(computeAngleCPP(vec1, vec2, prec));
    return rcpp_result_gen;
END_RCPP
}
// findNextCellCPP
IntegerVector findNextCellCPP(double angle);
RcppExport SEXP _mogsa2_findNextCellCPP(SEXP angleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type angle(angleSEXP);
    rcpp_result_gen = Rcpp::wrap(findNextCellCPP(angle));
    return rcpp_result_gen;
END_RCPP
}
// convertIndices2CellIDCPP
int convertIndices2CellIDCPP(int rowIndex, int columnIndex, int nRows, int nColumns);
RcppExport SEXP _mogsa2_convertIndices2CellIDCPP(SEXP rowIndexSEXP, SEXP columnIndexSEXP, SEXP nRowsSEXP, SEXP nColumnsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type rowIndex(rowIndexSEXP);
    Rcpp::traits::input_parameter< int >::type columnIndex(columnIndexSEXP);
    Rcpp::traits::input_parameter< int >::type nRows(nRowsSEXP);
    Rcpp::traits::input_parameter< int >::type nColumns(nColumnsSEXP);
    rcpp_result_gen = Rcpp::wrap(convertIndices2CellIDCPP(rowIndex, columnIndex, nRows, nColumns));
    return rcpp_result_gen;
END_RCPP
}
// convertCellID2IndicesCPP
IntegerVector convertCellID2IndicesCPP(int cellID, int nRows, int nColumns);
RcppExport SEXP _mogsa2_convertCellID2IndicesCPP(SEXP cellIDSEXP, SEXP nRowsSEXP, SEXP nColumnsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type cellID(cellIDSEXP);
    Rcpp::traits::input_parameter< int >::type nRows(nRowsSEXP);
    Rcpp::traits::input_parameter< int >::type nColumns(nColumnsSEXP);
    rcpp_result_gen = Rcpp::wrap(convertCellID2IndicesCPP(cellID, nRows, nColumns));
    return rcpp_result_gen;
END_RCPP
}
// cumulateGradientsCPP
NumericVector cumulateGradientsCPP(NumericMatrix centers, NumericMatrix gradients, double precVectorLength, double precNorm);
RcppExport SEXP _mogsa2_cumulateGradientsCPP(SEXP centersSEXP, SEXP gradientsSEXP, SEXP precVectorLengthSEXP, SEXP precNormSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type centers(centersSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type gradients(gradientsSEXP);
    Rcpp::traits::input_parameter< double >::type precVectorLength(precVectorLengthSEXP);
    Rcpp::traits::input_parameter< double >::type precNorm(precNormSEXP);
    rcpp_result_gen = Rcpp::wrap(cumulateGradientsCPP(centers, gradients, precVectorLength, precNorm));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mogsa2_assureBoundsCPP", (DL_FUNC) &_mogsa2_assureBoundsCPP, 4},
    {"_mogsa2_computeVectorLengthCPP", (DL_FUNC) &_mogsa2_computeVectorLengthCPP, 1},
    {"_mogsa2_normalizeVectorCPP", (DL_FUNC) &_mogsa2_normalizeVectorCPP, 2},
    {"_mogsa2_computeAngleCPP", (DL_FUNC) &_mogsa2_computeAngleCPP, 3},
    {"_mogsa2_findNextCellCPP", (DL_FUNC) &_mogsa2_findNextCellCPP, 1},
    {"_mogsa2_convertIndices2CellIDCPP", (DL_FUNC) &_mogsa2_convertIndices2CellIDCPP, 4},
    {"_mogsa2_convertCellID2IndicesCPP", (DL_FUNC) &_mogsa2_convertCellID2IndicesCPP, 3},
    {"_mogsa2_cumulateGradientsCPP", (DL_FUNC) &_mogsa2_cumulateGradientsCPP, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_mogsa2(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
